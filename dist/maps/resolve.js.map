{"version":3,"sources":["resolve.ls"],"names":[],"mappings":";AAAA,KAAS,CAAA,CAAA,CAAE,QAAQ,SAAA;AACnB,KAAS,CAAA,CAAA,CAAE,QAAQ,OAAA;AACnB,QAAS,CAAA,CAAA,CAAE,QAAQ,YAAA;AAEnB,MAAM,CAAC,OAAQ,CAAA,CAAA,CAAE,QAAA,CAAA,KAAA,EAAA,KAAA;;EAAQ,kBAAA,QAAQ;EAC/B,OAAQ,CAAA,CAAA,CAAE;EACV,KAAK,CAAC,KAAM,CAAA,CAAA,CAAE;EACd,KAAK,CAAC,WAAa,CAAA,CAAA,CAAE,QAAA,CAAA,EAAA;WAAG,OAAO,CAAC,KAAK,EAAA;;EAErC,QAAS,CAAA,CAAA,CAAE,KAAK,CAAC,cAAe,UAAU,KAAV;EAEhC,MAAO,CAAA,CAAA,CAAE,QAAA,CAAA;WACP;MAAA,SAAU,KAAK,CAAC,eAAiB,QAAA;MACjC,MAAU;IADV;;EAIF,OAAM;EAGoB,IAAG,OAAO,CAAC,MAAO,CAAA,GAAA,CAAG,CAArB;IAA1B,OAAO,CAAC,KAAK,KAAK,CAAC,KAAK,CAAA,CAAX;;SACb,KAAK,CAAC,KAAK,QAAQ,CAAC,UAAU,MAAnB","file":"resolve.js","sourcesContent":["Bacon    = require \\baconjs\nReact    = require \\react\nResolver = require \\./resolver\n\nmodule.exports = (child, props = {}) ->\n  streams = []\n  props.child = child\n  props.queue-stream = -> streams.push it\n\n  resolver = React.create-element Resolver, props\n\n  render = ->\n    content : React.render-to-string resolver\n    data    : arguments\n\n  # render once to populate _streams\n  render!\n\n  # once the queude streams resolve we re-render\n  streams.push Bacon.once 0 if streams.length is 0\n  Bacon.when resolver._streams, render\n"],"sourceRoot":"/source/"}