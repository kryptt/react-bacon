{"version":3,"sources":["mixin.ls"],"names":[],"mappings":";AAAA,KAAS,CAAA,CAAA,CAAE,QAAQ,SAAA;AACnB,KAAS,CAAA,CAAA,CAAE,QAAQ,OAAA;AACnB,QAAS,CAAA,CAAA,CAAE,QAAQ,YAAA;AAEnB,WAAa,CAAA,CAAA,CAAE,QAAA,CAAA,EAAA;;EACb,EAAE,CAAC,MAAH,QAAA,CAAA,EAAA,CAAA,CAAA,EAAE,CAAC,MAAQ,CAAA,CAAA,CAAE,EAAb;SACA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAE,CAAC,MAAH,CAAS,CAAC,KAAV,CAAA,QAAA;AAAA,IAAA,EAAA,KAAA;AAAA,IAAA,EAAA,IAAS,CAAC,KAAO,CAAA,CAAA,CAAE;;AACrB,WAAa,CAAA,CAAA,CAAE,QAAA,CAAA,EAAA;;EACb,EAAE,CAAC,MAAH,QAAA,CAAA,EAAA,CAAA,CAAA,EAAE,CAAC,MAAQ,CAAA,CAAA,CAAE,EAAb;SACA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAE,CAAC,MAAH,CAAS,CAAC,KAAV,CAAA,QAAA;AAAA,IAAA,EAAA,KAAA;AAAA,IAAA,EAAA,IAAS,CAAC,KAAO,CAAA,CAAA,CAAE;;AACrB,WAAa,CAAA,CAAA,CAAE,QAAA,CAAA,EAAA;;SACb,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,WAAA,CAAa,EAAA,CAAb,CAAgB,CAAC,KAAjB,CAAA,QAAA;AAAA,IAAA,EAAA,KAAA;AAAA,IAAA,EAAA,IAAgB,CAAC,KAAO,CAAA,CAAA,CAAxB,IAA8B,KAAK,CAAC,GAApC,CAAuC;;AACzC,WAAa,CAAA,CAAA,CAAE,QAAA,CAAA,EAAA;;SACb,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,WAAA,CAAa,EAAA,CAAb,CAAgB,CAAC,KAAjB,CAAA,QAAA;AAAA,IAAA,EAAA,KAAA;AAAA,IAAA,EAAA,IAAgB,CAAC,KAAO,CAAA,CAAA,CAAxB,IAA8B,KAAK,CAAC,GAApC,CAAuC;;AAEzC,QAAU,CAAA,CAAA,CAAE,QAAA,CAAA,EAAA;;gBAAA,CAAA,QAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAA,CAAA,CAAC,MAAG,EAAE,CAAC,MAAM,CAAC;;AAC9C,QAAU,CAAA,CAAA,CAAE,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA,SAAA;;EACV,GAAI,CAAA,CAAA,CAAE,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,WAAA,CAAa,EAAA,CAAb,CAAA,CAAA,IAAA,CAAA,CAAA,CAAkB,QAAA,CAAA,CAAA,CAAO,IAAzB,CAAA,CAAA,QAAA;AAAA,IAAA,EAAA,KAAA;AAAA,IAAA,EAAA,IAAA,CAAA,IAAA,CAAkC,CAAA,CAAA,CAAlC,IAAwC,KAAK,CAAC,GAA9C,CAAiD;EACvD,IAAG,EAAE,CAAC,IAAD,CAAL;IAAiB,MAAmD,6CAAnD;;EACjB,EAAE,CAAC,IAAD,CAAO,CAAA,CAAA,CAAE,UAAU,GAAD;SACpB;;AAEF,MAAM,CAAC,OAAQ,CAAA,CAAA,CACb;EAAA,cACE;IAAA,UAAU,KAAK,CAAC,SAAS,CAAC,WAAY,QAAD;EAArC;EAEF,aAAc,QAAA,CAAA,EAAA;IAAQ,IAAG,EAAA,QAAH;aAAY,YAAa,IAAA;KAAE;aAAK,YAAa,IAAA,CAAE,CAAC,IAAI,QAAA,CAAA,EAAA;eAAG,EAAE,CAAC,EAAD;OAAL;;;EAE1E,aAAc,QAAA,CAAA,EAAA;IAAQ,IAAG,EAAA,QAAH;aAAY,YAAa,IAAA;KAAE;aAAK,YAAa,IAAA,CAAE,CAAC,IAAI,QAAA,CAAA,EAAA;eAAG,EAAE,CAAC,EAAD;OAAL;;;EAE1E,aAAc,QAAA,CAAA,EAAA;WAAQ,SAAU,MAAG,IAAI,QAAA,CAAA,GAAA;aAAS,QAAA,CAAA,EAAA;QAAI,GAAG,CAAC,KAAK,EAAA;;KAA7B;;EAEhC,aAAc,QAAA,CAAA,EAAA;WAAQ,SAAU,MAAG,IAAI,QAAA,CAAA,GAAA;aAAS,QAAA,CAAA,EAAA;QAAI,GAAG,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,KAAV;;KAA7B;;EAEhC,aAAc,QAAA,CAAA,EAAA;WAAQ,SAAU,MAAG,IAAI,QAAA,CAAA,GAAA;aAAS,QAAA,CAAA,EAAA;QAAI,GAAG,CAAC,KAAY;QAAN,GAAD;;KAA7B;;EAEhC,gBAAkB,QAAA,CAAA,EAAA,EAAA,cAAA,EAAA,eAAA;IAAK,2BAAA,iBAAkB;IAAM,4BAAA,kBAAmB;WAChE,SAAU,MAAG,IAAI,QAAA,CAAA,GAAA;aAAS,QAAA,CAAA,EAAA;QACH,IAAG,cAAiB,CAAA,EAAA,CAAI,EAAE,CAAC,cAAH,QAAxB;UAArB,EAAE,CAAC,eAAe;;QACG,IAAG,eAAiB,CAAA,EAAA,CAAI,EAAE,CAAC,eAAH,QAAxB;UAArB,EAAE,CAAC,gBAAgB;;QACnB,GAAG,CAAC,KAAK,EAAA;;KAHD;;EAMZ,aAAc,QAAA,CAAA,KAAA;IAAW,YAAa,IAAA,CAAE,CAAC,KAAK,KAAA;WAAO;;EAGrD,MAAM,QAAA,CAAA,MAAA,EAAA,GAAA;;gBACJ,IAAC,CAAA,OAAO,CAAC;UAAS,CAAA,MAAM,MAAA;;WACxB,IAAC,CAAA,YAAa,MAAM,CAAC,QAAS,QAAA,CAAA,EAAA;;MAC5B,IAAA,CAAA,IAAA,CAAA,CAAA,CAAG,KAAC,CAAA,MAAJ,CAAA,QAAA,CAAA,EAAA,CAAA,IAAW,CAAA,QAAX;QACE,IAAG,GAAA,QAAH;iBAAa,KAAC,CAAA,kBAAA,CAAA,SAAW,GAAA,CAAA,CAAA,CAAD,MAAQ,UAAlB;SAAqB;iBAAK,KAAC,CAAA,SAAU,EAAA;;OACrD;QACE,KAAC,CAAA,KAAD,QAAA,CAAA,EAAA,CAAA,CAAA,KAAC,CAAA,KAAO,CAAA,CAAA,CAAE,EAAV;QACA,IAAG,GAAA,QAAH;iBAAa,KAAC,CAAA,KAAK,CAAC,GAAD,CAAM,CAAA,CAAA,CAAE;SAAG;iBAAK,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE;;;KALlB,CAAhB;;EAMhB,mBAAqB,QAAA,CAAA;IACnB,IAAC,CAAA,MAAD,QAAA,CAAA,EAAA,CAAA,CAAA,IAAC,CAAA,MAAQ,CAAA,CAAA,CAAE,EAAX;IACA,IAAC,CAAA,MAAM,CAAC,QAAU,CAAA,CAAA,CAAE;;EAEtB,oBAAsB,QAAA,CAAA;;IACpB,IAAG,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAC,CAAA,MAAD,CAAA,QAAA,CAAA,EAAA,IAAQ,CAAA,KAAR,CAAA,EAAA,MAAA,CAAA,QAAH;mBACE,IAAC,CAAA,MAAM,CAAC,KAAK,CAAC;aAAM,CAAA,KAAK,IAAC,CAAA,KAAD;;mBACzB,IAAC,CAAA,MAAM,CAAC,KAAK,CAAC;aAAM,CAAA,KAAK,IAAC,CAAA,KAAD;;;;EAE7B,sBAAwB,QAAA,CAAA;;IACtB,IAAG,IAAC,CAAA,MAAD,QAAH;MACE,IAAG,IAAC,CAAA,MAAM,CAAC,KAAR,QAAH;QACE,UAAS,IAAC,CAAA,MAAM,CAAC,KAAjB;UACE,IAAC,CAAA,MAAM,CAAC,KAAK,CAAC,CAAD,CAAG,CAAC,IAAG;;;kBACxB,IAAC,CAAA,MAAM,CAAC;YAAM,CAAA,QAAS,QAAA,CAAA,EAAA;UAAI,GAAE;SAAN;;MACvB,IAAC,CAAA,MAAO,CAAA,CAAA,CAAE;;;AA9Cd","file":"mixin.js","sourcesContent":["Bacon    = require \\baconjs\nReact    = require \\react\nResolver = require \\./resolver\n\nensure-unsub = ->\n  it._bacon ?= {}\n  it._bacon.unsub ?= []\nensure-buses = ->\n  it._bacon ?= {}\n  it._bacon.buses ?= {}\nensure-props = ->\n  ensure-buses it .props ?= new Bacon.Bus!\nensure-state = ->\n  ensure-buses it .state ?= new Bacon.Bus!\n\nevent-obj = -> \"#{it.target.name}\": it.target.value\nevent-bus = (it, name, generator) ->\n  bus = ensure-buses it .[\"event_#name\"] ?= new Bacon.Bus!\n  if it[name] then throw \"Cannot re-implement the event-bus end-point\"\n  it[name] = generator(bus)\n  bus\n\nmodule.exports =\n  context-types:\n    resolver: React.PropTypes.instance-of(Resolver)\n  # offer a bacon event stream for the component's properties.\n  stream-props: (pn) -> if pn? then ensure-props @ else ensure-props @ .map -> it[pn]\n  # offer a bacon event stream for the component's state.\n  stream-state: (sn) -> if sn? then ensure-state @ else ensure-state @ .map -> it[sn]\n  # register a callback hook and offer a stream on the other end of it.\n  event-stream: (en) -> event-bus @, en, (bus) -> !-> bus.push it\n  # similar to event-stream except we push it.target.value through the stream.\n  value-stream: (en) -> event-bus @, en, (bus) -> !-> bus.push it.target.value\n  # similar to event-stream except we push {it.target.name : it.target.value} through.\n  input-stream: (en) -> event-bus @, en, (bus) -> !-> bus.push (it |> event-obj)\n  # similar to event-stream except we bother to prevent event propagation.\n  dom-event-stream: (en, prevent-default = true, stop-propagation = true) ->\n    event-bus @, en, (bus) -> !->\n      it.prevent-default!  if prevent-default  and it.prevent-default?\n      it.stop-propagation! if stop-propagation and it.stop-propagation?\n      bus.push it\n  # links the unsub function to the component's lifecycle.\n  # unsub will be run in component-will-unmount.\n  subscribe-to: (unsub) -> ensure-unsub @ .push unsub; unsub\n  # plugs a stream into the components state.\n  # either under a specific key, or overriding the entire state object.\n  plug: (stream, key) ->\n    @context.resolver?queue stream\n    @subscribe-to stream.on-value ~>\n      if @_bacon?is-client\n        if key? then @set-state \"#key\": it else @set-state it\n      else\n        @state ?= {}\n        if key? then @state[key] = it else @state = it\n  component-did-mount: !->\n    @_bacon ?= {}\n    @_bacon.is-client = true\n  # push values to the props and state streams if they exist.\n  component-did-update: !->\n    if @_bacon?buses?\n      @_bacon.buses.props?push @props\n      @_bacon.buses.state?push @state\n  # cleanup whenever the component unmounts.\n  component-will-unmount: !->\n    if @_bacon?\n      if @_bacon.buses?\n        for b of @_bacon.buses\n          @_bacon.buses[b].end!\n      @_bacon.unsub?for-each !-> it!\n      @_bacon = {}\n"],"sourceRoot":"/source/"}