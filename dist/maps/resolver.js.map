{"version":3,"sources":["resolver.ls"],"names":[],"mappings":";AAAA,KAAM,CAAA,CAAA,CAAE,QAAQ,SAAA;AAChB,KAAM,CAAA,CAAA,CAAE,QAAQ,OAAA;AAEhB,MAAM,CAAC,OAAQ,CAAA,CAAA,CAAQ,YAAN,QAAA,CAAA,UAAA;;YACf,WAAoB;YACpB,kBAAoB,QAAA,CAAA;WAAG;MAAA,UAAU;IAAV;;YACvB,QAAoB,QAAA,CAAA,EAAA;WAAG,IAAC,CAAA,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK,CAAD,CAAP;;;;;;EAHA,KAAK,CAAC;AAK9C,QAAQ,CAAA,SAAE,CAAA,iBAAoB,CAAA,CAAA,CAC5B;EAAA,UAAU,KAAK,CAAC,SAAS,CAAC,WAAY,QAAA;AAAtC;AAEF,QAAQ,CAAA,SAAE,CAAA,MAAO,CAAA,CAAA,CAAE,QAAA,CAAA,SAAA,EAAA,KAAA;;EACjB,QAAS,CAAA,CAAA,CAAE,KAAK,CAAC,cAAe,kBAAW,KAAM,QAAA;AAAA,IAAN,EAAA,KAAM;AAAA,IAAE,EAAA,SAAQ,WAAU,gBAArC;EAChC,MAAS,CAAA,CAAA,CAAE,QAAA,CAAA;WACT;MAAA,SAAU,KAAK,CAAC,eAAiB,QAAA;MACjC,MAAU;IADV;;EAGF,OAAM;SAEN,KAAK,CAAC,KAAK,QAAQ,CAAC,UAAU,MAAnB","file":"resolver.js","sourcesContent":["Bacon = require \\baconjs\nReact = require \\react\n\nmodule.exports = class Resolver extends React.Component\n  _streams          : []\n  get-child-context : -> resolver: @\n  queue             : -> @_streams.push it.take(1)\n\nResolver::child-context-types =\n  resolver: React.PropTypes.instance-of Resolver\n\nResolver::render = (component, props) ->\n  resolver = React.create-element Resolver, (props ? {}) <<< children: component\n  render   = ->\n    content : React.render-to-string resolver\n    data    : arguments\n  # render once to populate _streams\n  render!\n  # once the queude streams resolve we re-render\n  Bacon.when resolver._streams, render\n"],"sourceRoot":"/source/"}